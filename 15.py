import os
import subprocess
import psutil
import platform
import time
import threading
import sys
import shutil
import requests  # pip install requests
import hashlib
import signal
from flask import Flask, jsonify, abort, request

app = Flask(__name__)

# ------------------------------------------------------------------------------
#                               –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------------------------------------------------------

users = [
    {"name": "Alice",   "ip": "172.19.0.1"},
    {"name": "Bob",     "ip": "192.168.1.11"},
    {"name": "Charlie", "ip": "192.168.1.12"}
]

UPDATE_URL = "https://raw.githubusercontent.com/WrNekit/agent-updater/refs/heads/main/14.py"
VERISONAPP = '1.0.1'
UPDATE_CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥—ã

@app.route('/version', methods=['GET'])
def version_get():
    return jsonify({"Version": VERISONAPP})

# ------------------------------------------------------------------------------
#                        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ------------------------------------------------------------------------------

def is_windows():
    return platform.system().lower() == "windows"

def is_compiled():
    # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ PyInstaller, sys.argv[0] –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .exe.
    return sys.argv[0].lower().endswith(".exe")

def convert_bytes(bytes_value):
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if bytes_value < 1024.0:
            return f"{bytes_value:.2f} {unit}"
        bytes_value /= 1024.0

def compute_hash(data):
    hash_func = hashlib.sha256()
    hash_func.update(data)
    return hash_func.hexdigest()

def file_hash(filename):
    with open(filename, "rb") as f:
        return compute_hash(f.read())

def normalize_code(data):
    try:
        text = data.decode('utf-8')
        text = text.replace('\r\n', '\n')
        text = text.strip()
        lines = [line.rstrip() for line in text.split('\n')]
        normalized = '\n'.join(lines)
        return normalized.encode('utf-8')
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:", e)
        return data

def code_has_changed(new_code):
    current_file = os.path.abspath(sys.argv[0])
    try:
        with open(current_file, "rb") as f:
            current_code = f.read()
        normalized_current = normalize_code(current_code)
        normalized_new = normalize_code(new_code)
        current_hash = compute_hash(normalized_current)
        new_hash = compute_hash(normalized_new)
        changed = current_hash != new_hash
        return changed, current_hash, new_hash
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞:", e)
        return True, None, None

def check_for_updates():
    try:
        response = requests.get(UPDATE_URL, timeout=30)
        if response.status_code != 200:
            print("[ERROR] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å:", response.status_code)
            return {"update_available": False, "error": f"HTTP {response.status_code}"}
        new_code = response.content
        changed, current_hash, new_hash = code_has_changed(new_code)
        if changed:
            return {
                "update_available": True,
                "current_hash": current_hash,
                "new_hash": new_hash,
                "update_url": UPDATE_URL
            }
        else:
            return {"update_available": False}
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", str(e))
        return {"update_available": False, "error": str(e)}

def shutdown_server():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å Flask –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    pid = os.getpid()  # –ü–æ–ª—É—á–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    print(f"[INFO] –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Flask (PID: {pid})...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞ 5000 –ø–æ—Ä—Ç—É
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            if 'python' in proc.info['name']:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Python-–ø—Ä–æ—Ü–µ—Å—Å—ã
                for conn in proc.info['connections']:
                    if conn.laddr.port == 5000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ä—Ç 5000
                        print(f"[INFO] –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å (PID: {proc.info['pid']})...")
                        proc.terminate()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
                        proc.wait(timeout=3)  # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (3 —Å–µ–∫—É–Ω–¥—ã)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ–≥–æ
    os.kill(pid, signal.SIGTERM)

@app.route('/shutdown', methods=['POST'])
def shutdown():
    shutdown_server()
    return "Server shutting down..."

def delayed_restart(delay, new_file):
    """
    –î–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤: –∂–¥—ë—Ç delay —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ /shutdown,
    –∞ –∑–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–æ–≤—ã–º —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ os.execv.
    """
    time.sleep(delay)
    print("[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ /shutdown, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å Flask.
        requests.post("http://127.0.0.1:5000/shutdown", timeout=5)
    except Exception as e:
        print("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å shutdown-–∑–∞–ø—Ä–æ—Å:", e)
    print("[INFO] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: –∑–∞–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–æ–≤—ã–º —Ñ–∞–π–ª–æ–º:", new_file)
    try:
        os.execv(sys.executable, [sys.executable, new_file] + sys.argv[1:])
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ os.execv:", e)
        os._exit(1)

def delayed_restart_exe(delay, new_file):
    """
    –î–ª—è –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤ (EXE): –∂–¥—ë—Ç delay —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë—Ç batch-—Ñ–∞–π–ª,
    –∫–æ—Ç–æ—Ä—ã–π –∫–æ–ø–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π EXE –ø–æ–≤–µ—Ä—Ö —Ç–µ–∫—É—â–µ–≥–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
    """
    time.sleep(delay)
    current_exe = os.path.abspath(sys.argv[0])
    bat_file = os.path.join(os.path.dirname(current_exe), "update.bat")
    bat_contents = f"""@echo off
timeout /t 3 /nobreak > NUL
copy /Y "{new_file}" "{current_exe}"
start "" "{current_exe}"
del "%~f0"
"""
    try:
        with open(bat_file, "w") as f:
            f.write(bat_contents)
        print("[INFO] Batch-—Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω:", bat_file)
        subprocess.Popen(["cmd", "/c", bat_file], shell=True)
    except Exception as e:
        print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ batch-—Ñ–∞–π–ª–∞:", e)
    os._exit(0)

def perform_update_sync(update_url):
    print("[INFO] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ URL:", update_url)
    try:
        response = requests.get(update_url, timeout=30)
        if response.status_code != 200:
            msg = f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å: {response.status_code}"
            print("[ERROR]", msg)
            return {"success": False, "message": msg}
        
        new_code = response.content
        changed, current_hash, new_hash = code_has_changed(new_code)
        if not changed:
            msg = "–ö–æ–¥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            print("[INFO]", msg)
            return {"success": False, "message": msg}
        
        current_file = os.path.abspath(sys.argv[0])
        current_dir = os.path.dirname(current_file)
        new_file_name = os.path.join(current_dir, "agent_new.py")
        backup_file = os.path.join(current_dir, "agent.bak")

        print(f"[INFO] –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ –≤ {new_file_name}")
        with open(new_file_name, "wb") as f:
            f.write(new_code)

        try:
            os.chmod(new_file_name, 0o755)
            print("[INFO] –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è", new_file_name)
        except Exception as e:
            print("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:", e)

        print("[INFO] –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª...")

        # üõë 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Flask
        shutdown_server()
        time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

        # üõë 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º Flask, –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        for proc in psutil.process_iter(["pid", "name", "connections"]):
            try:
                for conn in proc.info.get("connections", []):
                    if conn.laddr.port == 5000:
                        print(f"[INFO] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å Flask (PID: {proc.info['pid']})")
                        proc.terminate()
                        proc.wait(timeout=3)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass

        # üõë 3. –î–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        shutil.move(current_file, backup_file)  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
        shutil.move(new_file_name, current_file)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª

        print("[INFO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")

        # ‚úÖ 4. –°–æ–∑–¥–∞–µ–º `restart.bat` —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        batch_script = os.path.join(current_dir, "restart.bat")
        with open(batch_script, "w") as f:
            f.write(f"""@echo off
echo [INFO] –ó–∞–ø—É—Å–∫ Flask –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è... >> restart.log
timeout /t 3 /nobreak > NUL
start "" "{sys.executable}" "{current_file}" >> restart.log 2>&1
echo [INFO] Flask —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω >> restart.log
exit
""")

        print("[INFO] –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Batch-—Å–∫—Ä–∏–ø—Ç...")

        # üõë 5. –ó–∞–ø—É—Å–∫–∞–µ–º `restart.bat` –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        subprocess.Popen(["cmd", "/c", batch_script], creationflags=subprocess.CREATE_NEW_CONSOLE, close_fds=True)

        # üõë 6. –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—Å–∫ Flask
        time.sleep(5)
        print("[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å Flask...")

        flask_running = False
        for proc in psutil.process_iter(["pid", "name", "connections"]):
            try:
                for conn in proc.info.get("connections", []):
                    if conn.laddr.port == 5000:
                        flask_running = True
                        print(f"[INFO] Flask —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {proc.info['pid']})")
                        break
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass

        # ‚úÖ 7. –ï—Å–ª–∏ Flask –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è ‚Äì –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é
        if not flask_running:
            print("[WARNING] –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å Flask –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é...")
            subprocess.Popen([sys.executable, current_file], creationflags=subprocess.CREATE_NEW_CONSOLE, close_fds=True)

        # üõë 8. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        os._exit(0)

    except Exception as e:
        msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}"
        print("[ERROR]", msg)
        return {"success": False, "message": msg}

# ------------------------------------------------------------------------------
#                            Endpoints (Flask)
# ------------------------------------------------------------------------------

@app.route('/users', methods=['GET'])
def list_users():
    return jsonify({"users": users})

@app.route('/connect/<username>', methods=['GET'])
def connect_to_user(username):
    user = next((u for u in users if u['name'] == username), None)
    if not user:
        abort(404, description="User not found")
    return jsonify({
        "user": user,
        "metrics": get_metrics(),
        "directories": get_user_directories()
    })

@app.route('/connect/<username>/<metric_name>', methods=['GET'])
def connect_to_user_metric(username, metric_name):
    user = next((u for u in users if u['name'] == username), None)
    if not user:
        abort(404, description="User not found")
    metrics_data = get_metrics()
    if metric_name in metrics_data:
        return jsonify({metric_name: metrics_data[metric_name]})
    else:
        abort(404, description="Metric not found")

@app.route('/connect/<username>/directories', methods=['GET'])
def connect_to_user_directories(username):
    user = next((u for u in users if u['name'] == username), None)
    if not user:
        abort(404, description="User not found")
    return jsonify({"directories": get_user_directories()})

@app.route('/metrics', methods=['GET'])
def metrics():
    return jsonify(get_metrics())

def get_services():
    services = []
    if is_windows():
        for service in psutil.win_service_iter():
            try:
                services.append({
                    "name": service.name(),
                    "status": service.status(),
                    "display_name": service.display_name()
                })
            except Exception:
                pass
    else:
        result = subprocess.run(
            ["systemctl", "list-units", "--type=service", "--no-pager", "--no-legend"],
            stdout=subprocess.PIPE,
            text=True
        )
        for line in result.stdout.splitlines():
            parts = line.split()
            if len(parts) > 1:
                services.append({"name": parts[0], "status": parts[2]})
    return services

@app.route('/services', methods=['GET'])
def list_services():
    return jsonify({"services": get_services()})

@app.route('/connect/<username>/services', methods=['GET'])
def connect_to_user_services(username):
    user = next((u for u in users if u['name'] == username), None)
    if not user:
        abort(404, description="User not found")
    return jsonify({"user": user, "services": get_services()})

@app.route('/update', methods=['POST', 'GET'])
def update_endpoint():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
      1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
      2. –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏.
      3. –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω–∏–∫, –∑–∞–ø—É—Å–∫–∞–µ–º delayed_restart_exe,
         –∏–Ω–∞—á–µ ‚Äì delayed_restart.
    """
    update_info = check_for_updates()
    if update_info.get("update_available"):
        result = perform_update_sync(update_info["update_url"])
        if result.get("success"):
            if is_compiled():
                threading.Thread(target=delayed_restart_exe, args=(2, result["new_file"])).start()
            else:
                threading.Thread(target=delayed_restart, args=(2, result["new_file"])).start()
            return jsonify(result), 200
        else:
            return jsonify(result), 500
    else:
        return jsonify({"message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"}), 200

# ------------------------------------------------------------------------------
#                           –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
# ------------------------------------------------------------------------------

def get_metrics():
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    disk_info = psutil.disk_usage('/')
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
        processes.append({
            "pid": proc.info['pid'],
            "name": proc.info['name'],
            "cpu_usage": f"{proc.info['cpu_percent']:.1f}%",
            "memory_usage": convert_bytes(proc.info['memory_info'].rss),
        })
    return {
        "cpu": {
            "usage": f"{cpu_usage}%",
            "description": "–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU"
        },
        "memory": {
            "total": convert_bytes(memory_info.total),
            "used": convert_bytes(memory_info.used),
            "free": convert_bytes(memory_info.free),
            "percent": f"{memory_info.percent}%",
            "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"
        },
        "disk": {
            "total": convert_bytes(disk_info.total),
            "used": convert_bytes(disk_info.used),
            "free": convert_bytes(disk_info.free),
            "percent": f"{disk_info.percent}%",
            "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"
        },
        "processes": processes,
        "last_update": time.strftime('%Y-%m-%d %H:%M:%S'),
        "system_info": {
            "os": platform.system(),
            "os_version": platform.version(),
            "architecture": platform.architecture()[0],
            "hostname": platform.node()
        }
    }

def get_user_directories():
    system = platform.system().lower()
    path = "C:/Users" if is_windows() else "/home"
    try:
        return [d for d in os.listdir(path) if os.path.isdir(os.path.join(path, d))]
    except Exception as e:
        print("[WARNING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:", e)
        return []

# ------------------------------------------------------------------------------
#                         –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# ------------------------------------------------------------------------------

def background_update_checker():
    while True:
        update_info = check_for_updates()
        if update_info.get("update_available"):
            print("[INFO] –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:", update_info)

            # üõ† –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            result = perform_update_sync(update_info["update_url"])

            if result.get("success"):
                print("[INFO] –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            else:
                print("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", result.get("message"))

        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Ç, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        time.sleep(UPDATE_CHECK_INTERVAL)

# ------------------------------------------------------------------------------
#                               –ó–∞–ø—É—Å–∫
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    print("[INFO] –ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∞–≥–µ–Ω—Ç–∞. PID:", os.getpid())
    threading.Thread(target=background_update_checker, daemon=True).start()
    app.run(host='0.0.0.0', port=5000, use_reloader=False)
